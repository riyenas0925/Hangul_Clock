// 영,한,두,세,네,다섯,여섯,일곱,여덞,아홉,열,열한,열두(시)
const byte hour[13][6] = {
  {B100000, B000000, B000000, B000000, B000000, B000000},
  {B100000, B000000, B000001, B000000, B000000, B000000},
  {B010000, B000000, B000001, B000000, B000000, B000000},
  {B001000, B000000, B000001, B000000, B000000, B000000},
  {B000100, B000000, B000001, B000000, B000000, B000000},
  {B000011, B000000, B000001, B000000, B000000, B000000},
  {B000000, B110000, B000001, B000000, B000000, B000000},
  {B000000, B001100, B000001, B000000, B000000, B000000},
  {B000000, B000011, B000001, B000000, B000000, B000000},
  {B000000, B000000, B110001, B000000, B000000, B000000},
  {B000000, B000000, B001001, B000000, B000000, B000000},
  {B000000, B000000, B001101, B000000, B000000, B000000},
  {B000000, B000000, B001011, B000000, B000000, B000000}
};

// 영,십,이십,삼십,사십,오십
const byte minuteTens[6][6] = {
  {B000000, B000000, B000000, B000000, B000000, B000000},
  {B000000, B000000, B000000, B000001, B000000, B000001},
  {B000000, B000000, B000000, B010001, B000000, B000001},
  {B000000, B000000, B000000, B001001, B000000, B000001},
  {B000000, B000000, B000000, B000101, B000000, B000001},
  {B000000, B000000, B000000, B000011, B000000, B000001}
};

// 영,일,이,삼,사,오,육,칠,팔,구(분)
const byte minuteOnes[10][6] = {
  {B000000, B000000, B000000, B000000, B000000, B000000},
  {B000000, B000000, B000000, B000000, B010000, B000001},
  {B000000, B000000, B000000, B000000, B001000, B000001},
  {B000000, B000000, B000000, B000000, B000100, B000001},
  {B000000, B000000, B000000, B000000, B000010, B000001},
  {B000000, B000000, B000000, B000000, B000000, B010001},
  {B000000, B000000, B000000, B000000, B000001, B000001},
  {B000000, B000000, B000000, B000000, B000000, B001001},
  {B000000, B000000, B000000, B000000, B000000, B000101},
  {B000000, B000000, B000000, B000000, B000000, B000011}
};

// 도트매트릭스 출력 버퍼
byte pattern[6] = { 0, };

int rows[] = {2,3,4,5,6,7};
int cols[] = {8,9,10,14,15,16};

unsigned long startTime = 0;

void setup() {
  for (int i = 0; i < 6; i++) {
    pinMode(cols[i], OUTPUT);
    pinMode(rows[i], OUTPUT);
  }
}

void loop() {
  for(int i = 1; i < 12; i++) {
    for(int j = 0; j < 60; j++) {
      drawClock(i, j);
      display();
    }
  }
}

void drawClock(int h, int m) {
  for(int i = 0; i < 6; i++) {
    pattern[i] = hour[h][i] | minuteTens[m / 10][i] | minuteOnes[m % 10][i];
  }
}

void display(){
  while(millis() - startTime < 1000) {
    for(int i = 0; i < 6; i++) {
      for(int j = 0; j < 6; j++) {
        bool a = pattern[i] >> 5 - j & 0x01 ? LOW : HIGH;
        digitalWrite(cols[j], a);
      }
      digitalWrite(rows[i], HIGH);
      delay(1);
      digitalWrite(rows[i], LOW);
    }
  }

  startTime = millis();
}
